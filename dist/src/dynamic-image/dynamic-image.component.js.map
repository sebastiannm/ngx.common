{"version":3,"file":"dynamic-image.component.js","sourceRoot":"","sources":["../../../src/dynamic-image/dynamic-image.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, OnInit, OnDestroy, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'dynamic-image',\n  template: `\n  <div [class.loaded]=\"loaded\" class=\"dynamic-image-content {{align}} {{sizemode}} {{mainSide}}\">\n    <div [style.paddingBottom]=\"spacerStyle\" class=\"spacer\"></div>\n    <img [src]=\"imgUrl\" *ngIf=\"imgUrl\" class=\"large\"/>\n  </div>\n  `,\n  styles: [`\n    \\:host {\n      display: block;\n    }\n\n    .dynamic-image-content {\n      position: relative;\n      overflow: hidden;\n      box-sizing: border-box;\n    }\n\n    .dynamic-image-content.absolute {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n    }\n\n    .dynamic-image-content pre {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: white;\n      padding: 0;\n      font-size: .75em;\n      line-height: 1.6em;\n    }\n\n    .dynamic-image-content img {\n      position: absolute;\n      padding: 0;\n      margin: 0;\n      line-height: 0;\n    }\n\n    .dynamic-image-content img.small {\n      opacity: 1;\n    }\n\n    .dynamic-image-content img.large {\n      opacity: 0;\n      transition: opacity .75s;\n    }\n\n    .dynamic-image-content.noplaceholder img.small {\n      visibility: hidden;\n    }\n\n    .dynamic-image-content.fit.height img {\n      height: 100%;\n    }\n\n    .dynamic-image-content.fit.width img {\n      width: 100%;\n    }\n\n    .dynamic-image-content.fit.autoheight {\n      line-height: 0;\n    }\n\n    .dynamic-image-content.fit.autoheight .spacer {\n      display: none;\n    }\n\n    .dynamic-image-content.fit.autoheight img {\n      position: relative;\n      left: initial;\n      right: initial;\n      bottom: initial;\n      top: initial;\n      transform: none;\n      height: 100%;\n      width: auto;\n    }\n\n    .dynamic-image-content.fit.autowidth img {\n      position: absolute;\n      width: 100%;\n    }\n\n    .dynamic-image-content.crop.height img {\n      height: 100%;\n      max-width: initial;\n    }\n\n    .dynamic-image-content.crop.width img {\n      width: 100%;\n      max-height: initial;\n    }\n\n    .dynamic-image-content.loaded img {\n      border: 0;\n    }\n\n    .dynamic-image-content.loaded img.large {\n      opacity: 1;\n    }\n\n    .dynamic-image-content.loaded img.small {\n      opacity: 0;\n      position: absolute;\n    }\n\n    .dynamic-image-content.center img {\n      left: 50%;\n      right: initial;\n      top: 50%;\n      bottom: initial;\n      transform: translateX(-50%) translateY(-50%);\n    }\n\n    .dynamic-image-content.left.center img {\n      top: 50%;\n      right: initial;\n      left: 0;\n      bottom: initial;\n      transform: translateX(0%) translateY(-50%);\n    }\n\n    .dynamic-image-content.right.center img {\n      top: 50%;\n      right: 0;\n      left: initial;\n      bottom: initial;\n      transform: translateX(0%) translateY(-50%);\n    }\n\n    .dynamic-image-content.left.top img {\n      top: 0;\n      right: initial;\n      bottom: initial;\n      left: 0;\n      transform: translateX(0%) translateY(0%);\n    }\n\n    .dynamic-image-content.center.top img {\n      top: 0;\n      right: initial;\n      bottom: initial;\n      left: 50%;\n      transform: translateX(-50%) translateY(0%);\n    }\n\n    .dynamic-image-content.right.top img {\n      top: 0;\n      right: 0;\n      bottom: initial;\n      left: initial;\n      transform: translateX(0%) translateY(0%);\n    }\n\n    .dynamic-image-content.left.bottom img {\n      top: initial;\n      right: initial;\n      bottom: 0;\n      left: 0;\n      transform: translateX(0%) translateY(0%);\n    }\n\n    .dynamic-image-content.center.bottom img {\n      top: initial;\n      right: initial;\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%) translateY(0%);\n    }\n\n    .dynamic-image-content.right.bottom img {\n      top: initial;\n      right: 0;\n      bottom: 0;\n      left: initial;\n      transform: translateX(0%) translateY(0%);\n    }\n  `]\n})\nexport class DynamicImageComponent implements OnInit, OnDestroy {\n\n  @Input() public url: string;\n  @Input() public resolution: any;\n  @Input() public align: string = 'center center';\n  @Input() public sizemode: string = 'fit';\n  @Input() public scale: number = 1;\n  public loaded: boolean = false;\n  public spacerStyle: any;\n  public assetRatio: number;\n  public mainSide: string;\n  public imgUrl: string;\n  private wrapperRatio: number;\n  private width: number;\n  private height: number;\n  private servingUrl: string;\n  private servingSize: any;\n  private timeoutFunc: any;\n\n  constructor(\n    private elem: ElementRef\n  ){ }\n\n  public ngOnInit() {\n    this.assetRatio = this.resolution.width / this.resolution.height;\n    this.spacerStyle = `${this.resolution.height / this.resolution.width * 100}%`;\n\n    this.timeoutFunc = setTimeout(() => {\n      this.getSize();\n\n      if (this.height > 0 && this.width == 0) {\n        this.mainSide = 'autoheight';\n      } else if (this.width > 0 && this.height === 0) {\n        this.mainSide = 'autowidth';\n      } else {\n        if (this.sizemode === 'crop') {\n          this.mainSide = this.assetRatio > 1 ? 'height' : 'width';\n        } else {\n          this.mainSide = this.assetRatio < 1 ? 'height' : 'width';\n        }\n      }\n\n      this.resize();\n      this.getServingUrl();\n    });\n  }\n\n  public ngOnDestroy() {\n    clearTimeout(this.timeoutFunc);\n  }\n\n  private getSize() {\n    this.width  = this.elem.nativeElement.children[0].clientWidth;\n    this.height = this.elem.nativeElement.children[0].clientHeight;\n  }\n\n  private getServingUrl() {\n    let servingSize: any;\n\n    if (this.mainSide === 'autoheight') {\n      servingSize = Math.round(Math.max(this.height, this.height * this.assetRatio));\n    } else if (this.sizemode === 'crop' && this.height) {\n      if (this.assetRatio <= this.wrapperRatio) {\n        servingSize = Math.round(Math.max(this.width, this.width / this.assetRatio));\n      } else {\n        servingSize = Math.round(Math.max(this.height, this.height * this.assetRatio));\n      }\n    } else {\n      if (this.assetRatio <= this.wrapperRatio && this.height) {\n        servingSize = Math.round(Math.max(this.height, this.height * this.assetRatio));\n      } else {\n        servingSize = Math.round(Math.max(this.width, this.width / this.assetRatio));\n      }\n    }\n    servingSize = Math.min(servingSize * (Math.ceil(window.devicePixelRatio) || 1), 4000);\n    servingSize = parseInt(servingSize, 10);\n\n    if (servingSize === this.servingSize) {\n      this.loaded = true;\n      return;\n    }\n\n    this.servingSize = Math.max(servingSize, 60);\n    this.servingUrl = this.url + '?w=' + (this.servingSize * this.scale);\n\n    this.render();\n  }\n\n  private resize() {\n    if (this.mainSide !== 'autoheight' && this.mainSide !== 'autowidth') {\n      this.wrapperRatio = this.width / this.height;\n      if (this.sizemode === 'crop') {\n        this.mainSide = this.assetRatio < this.wrapperRatio ? 'width' : 'height';\n      } else {\n        this.mainSide = this.assetRatio > this.wrapperRatio ? 'width' : 'height';\n      }\n    }\n  }\n\n  private render(): void {\n    const img: any = new Image();\n\n    img.onload = () => {\n      this.imgUrl = this.servingUrl;\n      this.loaded = true;\n    };\n\n    img.src = this.servingUrl;\n  }\n}\n"]}